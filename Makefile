include .env

.PHONY: setup install net net-qos net-qos-screen net-qos-detach net-qos-interactive net-clean net-cli net-screen-kill net-sessions net-status \
        thingsboard run reset clean uninstall sims-start sims-stop sims-call sims-call-all

# üîß Setup dos reposit√≥rios
setup:
	@echo "[‚úì] Verificando reposit√≥rios MidDiTS e Simulator..."

	@if [ "$(USE_SSH)" = "true" ]; then \
		MIDDTS_URL=git@github.com:Digital-Twins-RSBR/middleware-dt.git; \
		SIMULATOR_URL=git@github.com:Digital-Twins-RSBR/iot_simulator.git; \
	else \
		MIDDTS_URL=$(MIDDTS_REPO_URL); \
		SIMULATOR_URL=$(SIMULATOR_REPO_URL); \
	fi; \
	\
	if [ ! -d "middts" ]; then \
		echo "[‚Üí] Clonando MidDiTS..."; \
		git clone $$MIDDTS_URL middts; \
	else \
		echo "[‚Üª] Atualizando MidDiTS..."; \
		cd middts && git checkout main && git pull; \
	fi; \
	\
	if [ ! -d "simulator" ]; then \
		echo "[‚Üí] Clonando Simulator..."; \
		git clone $$SIMULATOR_URL simulator; \
	else \
		echo "[‚Üª] Atualizando Simulator..."; \
		cd simulator && git checkout main && git pull; \
	fi

# üì¶ Instala√ß√£o de pacotes necess√°rios
install:
	@echo "[‚úì] Instalando depend√™ncias: Mininet, Docker, Socat..."
	sudo apt update
	sudo apt install -y mininet docker.io docker-compose socat net-tools openjdk-11-jdk graphviz xdot screen

# üîÅ Topologia b√°sica
net:
	@echo "[‚úì] Iniciando topologia Mininet b√°sica..."
	sudo python3 mininet/topo.py

# ‚öôÔ∏è Cria√ß√£o da topologia com QoS (em segundo plano com screen)
net-qos:
	@echo "[‚úì] Iniciando topologia Mininet com QoS Slices (detach)..."
	@screen -dmS mininet-session sudo python3 mininet/topo_qos.py

# üë®‚Äçüíª Cria√ß√£o da topologia com CLI ativa (modo interativo)
net-qos-interactive:
	@echo "[üß©] Rodando topo_qos.py diretamente (modo interativo)..."
	sudo python3 mininet/topo_qos.py

# üì∫ Cria√ß√£o da topologia com CLI dentro de uma screen (anexada)
net-qos-screen:
	@echo "[üß†] Rodando topo_qos.py dentro de screen 'mininet-session'..."
	screen -S mininet-session sudo python3 mininet/topo_qos.py

# üßº Limpeza da topologia
net-clean:
	@echo "[üßº] Limpando topologia Mininet anterior..."
	sudo mn -c

# üíª Acessar CLI da screen se ativa
net-cli:
	@echo "[üñ•Ô∏è] Acessando CLI do Mininet (screen)..."
	screen -r mininet-session || echo "Mininet n√£o est√° rodando. Use 'make net-qos-screen' ou 'make net-qos-interactive'."

# üí£ Matar screen da topologia
net-screen-kill:
	@echo "[üí•] Matando screen 'mininet-session'..."
	screen -S mininet-session -X quit

# üìã Listar sess√µes screen
net-sessions:
	@echo "[üìã] Sess√µes screen ativas:"
	screen -ls

# üîç Verificar status da sess√£o screen
net-status:
	@echo "[üîç] Verificando se screen 'mininet-session' est√° ativa..."
	screen -ls | grep mininet-session || echo "Nenhuma sess√£o ativa."

# üìã Listar hosts e switches do Mininet
net-list:
	@echo "[üìã] Listando Hosts e Switches Mininet..."
	@echo "Hosts:"
	@ip netns list | awk '{print " - " $$1}' | grep -E '^ - (tb|middts|sim_)'
	@echo "Switches (do sistema):"
	@sudo ovs-vsctl list-br | awk '{print " - " $$1}'

# üîç Acessar um host espec√≠fico no namespace do Mininet
net-enter:
	@if [ -z "$(host)" ]; then \
		echo "[‚ùå] Informe o host com 'make net-enter host=sim_001'"; \
	else \
		echo "[üîç] Acessando host $(host)..."; \
		sudo ip netns exec $(host) bash || echo "[‚ùå] Host $(host) n√£o encontrado."; \
	fi

# üì° Executar comando ping entre dois hosts
net-ping:
	@if [ -z "$(from)" ] || [ -z "$(to)" ]; then \
		echo "[‚ùå] Use: make net-ping from=sim_001 to=tb"; \
	else \
		echo "[üì°] Ping de $(from) para $(to):"; \
		sudo ip netns exec $(from) ping -c 4 $(to) || echo "[‚ùå] Erro ao executar ping."; \
	fi

# üì° Instala√ß√£o do ThingsBoard dentro do host tb
thingsboard:
	@echo "[‚úì] Instalando ThingsBoard no host tb (Mininet)..."
	mininet> tb ./install_thingsboard_in_namespace.sh

# üöÄ Subida de containers (MidDiTS, TB, Simuladores)
run:
	@echo "[üöÄ] Iniciando containers do experimento..."
	docker-compose up -d

# üîÑ Reset geral
reset:
	@echo "[üßº] Resetando ambiente: containers e Mininet..."
	sudo mn -c
	docker stop `docker ps -q` || true
	docker rm `docker ps -aq` || true

# üßΩ Limpeza de reposit√≥rios locais
clean:
	@echo "[üßΩ] Limpando tudo..."
	rm -rf middts simulator

# üßπ Desinstala√ß√£o completa
uninstall:
	@echo "[üßπ] Executando desinstala√ß√£o completa..."
	./commands/uninstall_all.sh

# üîß Simuladores
sims-start:
	@echo "[üöÄ] Subindo todos os simuladores..."
	./commands/manage_simulators.sh start

sims-stop:
	@echo "[üõë] Parando todos os simuladores..."
	./commands/manage_simulators.sh stop

sims-call:
	@echo "[‚öôÔ∏è] Executando comando nos simuladores selecionados..."
	./commands/manage_simulators.sh call $(ARGS)

sims-call-all:
	@echo "[‚öôÔ∏è] Executando comando em todos os simuladores..."
	./commands/manage_simulators.sh call_all $(ARGS)

mount-shared-dirs:
	@echo "[üîó] Montando diret√≥rio compartilhado nos hosts da topologia..."
	@chmod +x scripts/*.sh
	@./scripts/mount_shared_dirs.sh

net-unmount-shared-dirs:
	@echo "[üóëÔ∏è] Desmontando diret√≥rio compartilhado dos hosts..."
	@HOSTS="tb middts"; \
	for i in $(shell seq -w 1 100); do \
		HOSTS="$$HOSTS sim_$$i"; \
	done; \
	for host in $$HOSTS; do \
		if ip netns list | grep -q "^$$host"; then \
			sudo umount -l "/var/run/netns/$$host/mnt/scripts" 2>/dev/null && echo "[‚úì] $$host desmontado" || echo "[!] $$host j√° desmontado ou inexistente"; \
		else \
			echo "[!] Namespace '$$host' n√£o encontrado. Ignorando..."; \
		fi; \
	done

