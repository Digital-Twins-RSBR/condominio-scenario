#!/bin/bash

# ==============================================================================
# Apply Profile with Safe ThingsBoard Restart
# ==============================================================================
# Descri√ß√£o: Aplica perfil COM restart seguro e verifica√ß√£o de subida do TB
# Uso: ./scripts/apply_profile_safe_restart.sh <profile_name>
# Categoria: [PRINCIPAL] - Restart Seguro
# 
# Garante que:
# - Configura√ß√µes s√£o aplicadas via rebuild
# - ThingsBoard sobe corretamente ap√≥s restart
# - Fallback para configura√ß√£o anterior se falhar
# - Verifica√ß√£o completa de sa√∫de do container
# ==============================================================================

PROFILE_NAME="$1"
PROFILES_DIR="/var/condominio-scenario/config/profiles"
CONFIG_DIR="/var/condominio-scenario/config"
BACKUP_CONFIG="$CONFIG_DIR/thingsboard-urllc.yml.backup_safe"

# Fun√ß√£o para mostrar perfis dispon√≠veis
show_available_profiles() {
    echo "üìÅ Perfis dispon√≠veis:"
    for profile in "$PROFILES_DIR"/*.yml; do
        if [ -f "$profile" ]; then
            basename "$profile" .yml | sed 's/^/  ‚Ä¢ /'
        fi
    done
}

# Fun√ß√£o para verificar sa√∫de do ThingsBoard
check_thingsboard_health() {
    local retries=0
    local max_retries=60  # 2 minutos
    
    echo "üè• Verificando sa√∫de do ThingsBoard..."
    
    while [ $retries -lt $max_retries ]; do
        # Verificar se container est√° rodando
        if ! docker ps --format "{{.Names}}" | grep -q "^mn.tb$"; then
            echo "‚ö†Ô∏è Container ThingsBoard n√£o est√° rodando (tentativa $((retries+1))/$max_retries)"
            sleep 2
            retries=$((retries + 1))
            continue
        fi
        
        # Verificar se processo Java est√° ativo
        if ! docker exec mn.tb pgrep -f thingsboard > /dev/null 2>&1; then
            echo "‚ö†Ô∏è Processo ThingsBoard n√£o est√° ativo (tentativa $((retries+1))/$max_retries)"
            sleep 2
            retries=$((retries + 1))
            continue
        fi
        
        # Verificar se porta 8080 est√° respondendo
        if docker exec mn.tb netstat -tlnp 2>/dev/null | grep -q ":8080 "; then
            echo "‚úÖ ThingsBoard est√° saud√°vel e respondendo na porta 8080"
            return 0
        fi
        
        echo "‚ö†Ô∏è ThingsBoard ainda n√£o est√° respondendo (tentativa $((retries+1))/$max_retries)"
        sleep 2
        retries=$((retries + 1))
    done
    
    echo "‚ùå ThingsBoard falhou em subir corretamente ap√≥s $max_retries tentativas"
    return 1
}

# Fun√ß√£o para restaurar configura√ß√£o anterior
restore_previous_config() {
    echo "üîÑ Restaurando configura√ß√£o anterior..."
    if [ -f "$BACKUP_CONFIG" ]; then
        cp "$BACKUP_CONFIG" "$CONFIG_DIR/thingsboard-urllc.yml"
        echo "‚úÖ Configura√ß√£o anterior restaurada"
    else
        echo "‚ö†Ô∏è Backup anterior n√£o encontrado"
    fi
}

# Validar argumentos
if [ -z "$PROFILE_NAME" ]; then
    echo "‚ùå Erro: Nome do perfil √© obrigat√≥rio"
    echo ""
    echo "üìã Uso: $0 <profile_name>"
    echo ""
    show_available_profiles
    exit 1
fi

# Verificar se perfil existe
PROFILE_FILE="$PROFILES_DIR/${PROFILE_NAME}.yml"
if [ ! -f "$PROFILE_FILE" ]; then
    echo "‚ùå Erro: Perfil '$PROFILE_NAME' n√£o encontrado"
    echo ""
    show_available_profiles
    exit 1
fi

echo "üõ°Ô∏è Aplicando perfil com RESTART SEGURO: $PROFILE_NAME"

# Ler informa√ß√µes do perfil
PROFILE_DISPLAY_NAME=$(grep "PROFILE_NAME:" "$PROFILE_FILE" | cut -d'"' -f2 || echo "$PROFILE_NAME")
PROFILE_DESCRIPTION=$(grep "PROFILE_DESCRIPTION:" "$PROFILE_FILE" | cut -d'"' -f2 || echo "")
HEARTBEAT_INTERVAL=$(grep "HEARTBEAT_INTERVAL:" "$PROFILE_FILE" | cut -d' ' -f2 || echo "4")
RPC_TIMEOUT=$(grep "CLIENT_SIDE_RPC_TIMEOUT:" "$PROFILE_FILE" | awk '{print $2}')

echo "üìã Perfil: $PROFILE_DISPLAY_NAME"
echo "üìù Descri√ß√£o: $PROFILE_DESCRIPTION"
echo "üîó RPC Timeout: ${RPC_TIMEOUT}ms"
echo "üíì HEARTBEAT_INTERVAL: ${HEARTBEAT_INTERVAL}s"
echo ""

# 1. Backup da configura√ß√£o atual
echo "üíæ Fazendo backup da configura√ß√£o atual..."
if [ -f "$CONFIG_DIR/thingsboard-urllc.yml" ]; then
    cp "$CONFIG_DIR/thingsboard-urllc.yml" "$BACKUP_CONFIG"
    echo "‚úÖ Backup salvo em: $BACKUP_CONFIG"
fi

# 2. Aplicar novo perfil
echo "üìÑ Aplicando novo perfil..."
cp "$PROFILE_FILE" "$CONFIG_DIR/thingsboard-urllc.yml"

# 3. Rebuild do ThingsBoard
echo "üî® Rebuilding ThingsBoard com novo perfil..."
cd /var/condominio-scenario
if ! sudo docker build -t tb-node-custom -f dockerfiles/Dockerfile.tb services/ > /dev/null 2>&1; then
    echo "‚ùå Falha no build do container ThingsBoard"
    restore_previous_config
    exit 1
fi
echo "‚úÖ Build conclu√≠do com sucesso"

# 4. Verificar se ThingsBoard est√° rodando e parar se necess√°rio
if docker ps --format "{{.Names}}" | grep -q "^mn.tb$"; then
    echo "üõë Parando ThingsBoard atual..."
    docker stop mn.tb > /dev/null 2>&1
    sleep 5
fi

# 5. Restart completo do ThingsBoard (container + servi√ßo)
echo "üöÄ Restart completo do ThingsBoard (container + servi√ßo)..."

# Stop container
if docker ps --format "{{.Names}}" | grep -q "^mn.tb$"; then
    echo "ÔøΩ Parando container ThingsBoard..."
    docker stop mn.tb > /dev/null 2>&1
    sleep 3
fi

# Start container
    echo "üîÑ Restarting ThingsBoard using service management..."
    sudo docker exec mn.tb service thingsboard restart# 6. Verificar sa√∫de do ThingsBoard
if ! check_thingsboard_health; then
    echo "‚ùå ThingsBoard falhou em subir corretamente"
    echo "üîÑ Tentando restaurar configura√ß√£o anterior..."
    
    # Restaurar configura√ß√£o
    restore_previous_config
    
    # Rebuild com configura√ß√£o anterior
    echo "üî® Rebuilding com configura√ß√£o anterior..."
    sudo docker build -t tb-node-custom -f dockerfiles/Dockerfile.tb services/ > /dev/null 2>&1
    
    # Restart com configura√ß√£o anterior
    docker stop mn.tb > /dev/null 2>&1
    sleep 5
    docker start mn.tb > /dev/null 2>&1
    
    echo "‚ö†Ô∏è Configura√ß√£o anterior restaurada. Verifique logs do ThingsBoard."
    exit 1
fi

# 7. Aplicar HEARTBEAT nos simuladores
echo "üíì Aplicando HEARTBEAT=${HEARTBEAT_INTERVAL}s nos simuladores..."
for sim_num in $(seq -w 1 10); do
    container="mn.sim_0${sim_num}"
    if docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
        docker exec "$container" bash -c "
            sed -i 's/HEARTBEAT_INTERVAL = [0-9]*/HEARTBEAT_INTERVAL = ${HEARTBEAT_INTERVAL}/g' /iot_simulator/config.py 2>/dev/null || true
        " 2>/dev/null || true
    fi
done

# 8. Atualizar marcadores de perfil
echo "$PROFILE_NAME" > "$CONFIG_DIR/.current_profile" 2>/dev/null || sudo bash -c "echo '$PROFILE_NAME' > '$CONFIG_DIR/.current_profile'"
date '+%Y-%m-%d %H:%M:%S' > "$CONFIG_DIR/.profile_applied_at" 2>/dev/null || sudo bash -c "date '+%Y-%m-%d %H:%M:%S' > '$CONFIG_DIR/.profile_applied_at'"

echo ""
echo "üéâ Perfil '$PROFILE_NAME' aplicado com SUCESSO e ThingsBoard verificado!"
echo ""
echo "üìä Configura√ß√µes aplicadas:"
grep -E "CLIENT_SIDE_RPC_TIMEOUT|HTTP_REQUEST_TIMEOUT_MS|SQL_TS_BATCH_MAX_DELAY_MS" "$PROFILE_FILE" | head -5 | sed 's/^/  ‚Ä¢ /'
echo ""
echo "üöÄ Execute 'make odte-full' para testar com o novo perfil!"