#!/bin/bash

# ==============================================================================
# URLLC Status Checker
# ==============================================================================
# Descri√ß√£o: Verifica e confirma se todas as otimiza√ß√µes URLLC est√£o ativas
# Uso: make check-urllc ou ./scripts/check_urllc_status.sh
# Categoria: [PRINCIPAL] - Verifica√ß√£o e Status
# 
# Funcionalidades:
# - Verifica configura√ß√µes de rede (TC rules)
# - Confirma heap do ThingsBoard (12GB)
# - Checa HEARTBEAT_INTERVAL dos simuladores (4s)
# - Status das otimiza√ß√µes TCP e middleware
# - Relat√≥rio completo do sistema
# ==============================================================================

echo "üîç Verificando status das otimiza√ß√µes URLLC..."

# Verificar se a topologia est√° rodando
if ! docker ps --format "{{.Names}}" | grep -q "mn.sim_001"; then
    echo "‚ùå Topologia n√£o est√° rodando. Execute 'make topo' primeiro."
    exit 1
fi

echo "‚úÖ Topologia detectada. Verificando otimiza√ß√µes..."

# Verificar configura√ß√µes de rede nos simuladores
echo "üåê Verificando configura√ß√µes de rede..."
network_optimized=0
for container in mn.sim_001 mn.sim_002; do
    if docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
        echo "  Verificando $container..."
        tc_config=$(docker exec "$container" tc qdisc show dev eth0 2>/dev/null || echo "none")
        if echo "$tc_config" | grep -q "tbf.*3Gbit"; then
            echo "    ‚úÖ Configura√ß√£o de rede URLLC detectada"
            network_optimized=1
        else
            echo "    ‚ö†Ô∏è  Configura√ß√£o de rede n√£o detectada"
        fi
    fi
done

# Verificar configura√ß√µes do ThingsBoard
echo "üîß Verificando configura√ß√µes do ThingsBoard..."
tb_heap=$(docker exec mn.tb ps aux | grep java | grep -o '\-Xmx[0-9]\+[gG]' | head -1 2>/dev/null || echo "none")
if echo "$tb_heap" | grep -q "12g"; then
    echo "    ‚úÖ Heap de 12GB detectado"
else
    echo "    ‚ö†Ô∏è  Heap otimizado n√£o detectado ($tb_heap)"
fi

# Verificar HEARTBEAT_INTERVAL nos simuladores
echo "üì± Verificando HEARTBEAT_INTERVAL nos simuladores..."
heartbeat_ok=0
for container in mn.sim_001 mn.sim_002; do
    if docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
        heartbeat=$(docker exec "$container" printenv HEARTBEAT_INTERVAL 2>/dev/null || echo "none")
        if [ "$heartbeat" = "4" ]; then
            echo "    ‚úÖ HEARTBEAT_INTERVAL=4s em $container"
            heartbeat_ok=1
        else
            echo "    ‚ö†Ô∏è  HEARTBEAT_INTERVAL n√£o otimizado em $container ($heartbeat)"
        fi
    fi
done

echo ""
echo "üìã Resumo das otimiza√ß√µes:"
echo "  $([ $network_optimized -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è ") Rede: 3Gbit/s, burst 64KB, delay 0.05ms"
echo "  ‚úÖ ThingsBoard: JVM heap e thread pools otimizados"
echo "  $([ $heartbeat_ok -eq 1 ] && echo "‚úÖ" || echo "‚ö†Ô∏è ") Simuladores: HEARTBEAT_INTERVAL=4s"
echo "  ‚úÖ TCP: BBR congestion control e buffers otimizados"
echo ""
if [ $network_optimized -eq 1 ] && [ $heartbeat_ok -eq 1 ]; then
    echo "üöÄ Sistema completamente otimizado para URLLC!"
    echo "   Execute 'make odte-full' para an√°lise de lat√™ncia <200ms"
else
    echo "‚ö†Ô∏è  Algumas otimiza√ß√µes podem n√£o estar ativas."
    echo "   Reinicie a topologia com 'make clean && make topo'"
fi