#!/bin/bash

# üßπ Script de limpeza de espa√ßo para cen√°rio longo
# Remove imagens, volumes e containers orf√£os com seguran√ßa

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üßπ LIMPEZA DE ESPA√áO DOCKER${NC}"
echo -e "${BLUE}============================${NC}"
echo ""

# Verificar espa√ßo antes
echo -e "${YELLOW}üìä Espa√ßo ANTES da limpeza:${NC}"
docker system df
echo ""

# 1. Identificar containers ativos
echo -e "${YELLOW}üîç Verificando containers ativos...${NC}"
ACTIVE_CONTAINERS=$(docker ps --format "{{.Names}}" | tr '\n' ' ')
echo -e "   Containers ativos: ${GREEN}${ACTIVE_CONTAINERS}${NC}"
echo ""

# 2. Remover imagens √≥rf√£s (tagged com <none>)
echo -e "${YELLOW}üóëÔ∏è  Removendo imagens √≥rf√£s...${NC}"
DANGLING_IMAGES=$(docker images -f "dangling=true" -q)
if [ -n "$DANGLING_IMAGES" ]; then
    echo "   Encontradas $(echo $DANGLING_IMAGES | wc -w) imagens √≥rf√£s"
    docker rmi $DANGLING_IMAGES 2>/dev/null || echo "   Algumas imagens n√£o puderam ser removidas (em uso)"
    echo -e "   ${GREEN}‚úÖ Imagens √≥rf√£s removidas${NC}"
else
    echo -e "   ${GREEN}‚úÖ Nenhuma imagem √≥rf√£ encontrada${NC}"
fi
echo ""

# 3. Remover containers parados (exceto os importantes)
echo -e "${YELLOW}üóëÔ∏è  Removendo containers parados...${NC}"
STOPPED_CONTAINERS=$(docker ps -a -f "status=exited" --format "{{.Names}}" | grep -v -E "^(mn\.|tb|influx|neo4j|postgres)" || true)
if [ -n "$STOPPED_CONTAINERS" ]; then
    echo "   Containers parados para remo√ß√£o:"
    echo "$STOPPED_CONTAINERS" | sed 's/^/      /'
    echo "$STOPPED_CONTAINERS" | xargs docker rm 2>/dev/null || echo "   Alguns containers n√£o puderam ser removidos"
    echo -e "   ${GREEN}‚úÖ Containers parados removidos${NC}"
else
    echo -e "   ${GREEN}‚úÖ Nenhum container parado para remover${NC}"
fi
echo ""

# 4. Listar volumes grandes
echo -e "${YELLOW}üìÅ Verificando volumes grandes...${NC}"
echo "   Volumes principais:"
for vol in influx_data tb_db_data neo4j_data db_data; do
    if docker volume ls --format "{{.Name}}" | grep -q "^${vol}$"; then
        SIZE=$(docker volume inspect $vol --format "{{.Mountpoint}}" | xargs du -sh 2>/dev/null | cut -f1 || echo "N/A")
        echo -e "      $vol: ${GREEN}$SIZE${NC}"
    fi
done
echo ""

# 5. Listar volumes √≥rf√£os
echo -e "${YELLOW}üîç Verificando volumes √≥rf√£os...${NC}"
# Lista todos os volumes
ALL_VOLUMES=$(docker volume ls --format "{{.Name}}")
# Lista volumes em uso
USED_VOLUMES=$(docker ps -a --format "{{.Mounts}}" | tr ',' '\n' | grep -o '[a-f0-9]\{64\}' | sort -u || true)

ORPHAN_COUNT=0
echo "   Analisando $(echo "$ALL_VOLUMES" | wc -l) volumes..."

# Contar volumes √≥rf√£os (n√£o vamos listar todos para n√£o encher a tela)
for vol in $ALL_VOLUMES; do
    # Pular volumes importantes
    if echo "$vol" | grep -qE "^(influx_data|tb_db_data|neo4j_data|db_data|influx_logs|tb_logs|neo4j_logs|parser_logs|tb_assets)$"; then
        continue
    fi
    
    # Verificar se n√£o est√° em uso
    if ! echo "$USED_VOLUMES" | grep -q "$vol"; then
        ORPHAN_COUNT=$((ORPHAN_COUNT + 1))
    fi
done

if [ $ORPHAN_COUNT -gt 0 ]; then
    echo -e "   ${YELLOW}‚ö†Ô∏è  Encontrados $ORPHAN_COUNT volumes √≥rf√£os${NC}"
    echo -e "   ${YELLOW}üí° Execute: docker volume prune${NC}"
else
    echo -e "   ${GREEN}‚úÖ Nenhum volume √≥rf√£o detectado${NC}"
fi
echo ""

# 6. Verificar espa√ßo ap√≥s limpeza b√°sica
echo -e "${YELLOW}üìä Espa√ßo AP√ìS limpeza b√°sica:${NC}"
docker system df
echo ""

# 7. Sugest√µes de limpeza adicional
AVAILABLE_GB=$(df /var | tail -1 | awk '{print int($4/1024/1024)}')
echo -e "${BLUE}üí° SUGEST√ïES PARA LIBERAR MAIS ESPA√áO:${NC}"
echo ""

if [ $ORPHAN_COUNT -gt 0 ]; then
    echo -e "${YELLOW}1. Remover volumes √≥rf√£os:${NC}"
    echo -e "   ${YELLOW}docker volume prune -f${NC}"
    echo -e "   Economia estimada: ~$(($ORPHAN_COUNT * 10))MB"
    echo ""
fi

echo -e "${YELLOW}2. Limpar build cache:${NC}"
echo -e "   ${YELLOW}docker builder prune -f${NC}"
echo ""

echo -e "${YELLOW}3. Limpar imagens antigas n√£o utilizadas:${NC}"
echo -e "   ${YELLOW}docker image prune -a -f${NC}"
echo -e "   ‚ö†Ô∏è  Cuidado: Remove TODAS as imagens n√£o utilizadas"
echo ""

echo -e "${YELLOW}4. Limpeza completa (PERIGOSO):${NC}"
echo -e "   ${YELLOW}docker system prune -a -f --volumes${NC}"
echo -e "   ‚ö†Ô∏è  CUIDADO: Remove tudo n√£o utilizado"
echo ""

# 8. Status final
echo -e "${BLUE}üìã RESUMO:${NC}"
echo -e "   ‚Ä¢ Espa√ßo dispon√≠vel: ${GREEN}${AVAILABLE_GB}GB${NC}"
echo -e "   ‚Ä¢ InfluxDB: ${GREEN}$(docker volume inspect influx_data --format "{{.Mountpoint}}" | xargs du -sh 2>/dev/null | cut -f1 || echo "N/A")${NC}"

if [ $AVAILABLE_GB -gt 10 ]; then
    echo -e "   ‚Ä¢ Status: ${GREEN}‚úÖ Espa√ßo suficiente para teste de 8h${NC}"
else
    echo -e "   ‚Ä¢ Status: ${RED}‚ö†Ô∏è  Considere liberar mais espa√ßo${NC}"
fi

echo ""
echo -e "${GREEN}üßπ Limpeza b√°sica conclu√≠da!${NC}"